% Initialize serial communication
s = serialport('COM3', 115200, 'Timeout', 10);
disp("Opening: " + s.Port);

flush(s); % Clears input and output buffers

input("Press Enter to start communication...", 's');
writeline(s, 's');  % Send a start signal to the microcontroller

% Open file for writing
f = fopen("tof.xyz", "w");  
if f == -1
    error("Error opening file.");
end

% Define a list of 32 evenly spaced angles from 0° to 348.75°
angles = 0:11.25:348.75;

numLayers = 3;     % Number of stepping layers
z_spacing = 1;      % Space between layers in Z

layer = 1;
while layer <= numLayers
    fprintf("----- Starting z layer %d -----\n", layer);
    
    % Storage for current layer data 3 spatial xyz coord with 32
    % measurements
    layerData = zeros(32, 3);
    
    % Reset counter for valid readings
    validCount = 0;
    i = 1;

    if layer > 1
        input("Take a step forward for next layer and press Enter to continue...", 's');
    end
    
    writeline(s, 's');

    while validCount < 32
        x = readline(s);
        x = string(x);
        disp("Received: " + x);

        % parses the data into a list of strings
        values = str2double(split(x)); 
           
        % makes sure that atleast 2 values and the 2 value is a numerical
        % number before proceeding to take the second value being the
        % distance
        if numel(values) >= 2 && ~isnan(values(2))  
            distance = values(2);
            % angles ex. if i=9 then ninth element in list is 90 degrees
            angle = angles(i);

            x_coord = distance * cosd(angle);
            y_coord = distance * sind(angle);
            z_coord = layer * z_spacing;

            % Store data temporarily instead of writing immediately into
            % the layer data matrix, need to make validCount+1 bc it
            % starts at validCount = 0, then writes ':' which means all
            % columns filling them with the appropriate x y z
            layerData(validCount+1, :) = [x_coord, y_coord, z_coord];
            % adds to the valid count 32 times in order to fill layer data
            % matrix
            validCount = validCount + 1;
            % for the angles
            i = i + 1;
        else
            disp("Invalid or missing data. Proceeding to next...");
        end
    end
    
    % Quick visualization of current layer
    figure;
    scatter(layerData(:,1), layerData(:,2), 20, 'filled');
    title(sprintf('Layer %d - Top-down view', layer));
    xlabel('X coordinate');
    ylabel('Y coordinate');
    axis equal;
    grid on;
    
    % Ask if user wants to keep this layer or restart
    validResponse = false;
    while ~validResponse
        choice = input("\nKeep this layer? (y/n): ", 's');
        
        % Check if input is valid
        if isempty(choice)
            fprintf("Please enter 'y' or 'n'.\n");
        elseif lower(choice(1)) == 'y'
            validResponse = true;
            keepLayer = true;
        elseif lower(choice(1)) == 'n'
            validResponse = true;
            keepLayer = false;
        else
            fprintf("Invalid response. Please enter 'y' or 'n'.\n");
        end
    end
    
    close; % Close the figure
    
    if keepLayer
        % writes layer data to f which handles tof.xyz
        for j = 1:size(layerData, 1)
            % plots it on by j = rows and 1 2 3 columns
            fprintf(f, '%.4f %.4f %.4f\n', layerData(j,1), layerData(j,2), layerData(j,3));
        end
        fprintf("Layer %d data saved.\n", layer);
        layer = layer + 1;  % Move to next layer
    else
        fprintf("Discarding layer %d data. Restarting layer scan...\n", layer);
        flush(s);  % Clear any buffered data
    end
end

% Close everything
fclose(f);
disp("File saved: tof.xyz");

disp("Closing: " + s.Port);
clear s;

%% Data Visualization/Plotting
% Read the XYZ point data
data = readmatrix("tof.xyz", 'FileType', 'text');

% Define the layer structure
num_layers = numLayers;
points_per_layer = 32;

% Safety check
if size(data,1) ~= num_layers * points_per_layer
    warning('Unexpected number of points. Expected %d, got %d.', num_layers * points_per_layer, size(data,1));
end

% Extract coordinates
x = data(:,1);  % Measured distance (e.g., motor sweep)
y = data(:,2);  % Vertical height
z = data(:,3);  % Layer index or hallway depth

layer_spacing = 500;  % Adjust to match hallway depth
for layer = 0:(num_layers-1)
    startIdx = (layer * points_per_layer + 1);
    % stops it from going out of bounds
    endIdx = min(startIdx + points_per_layer - 1, size(data,1));
    idx = startIdx:endIdx;
    z(idx) = layer * layer_spacing;
end

% Swap axes for the correct hallway orientation
x_plot = z;   % Depth (Z) → X-axis
y_plot = y;   % Height (Y) → Y-axis
z_plot = x;   % Sweep position (X) → Z-axis

% Plot
figure;
plot3(x_plot, y_plot, z_plot, 'b-', 'LineWidth', 0.5);  % thin blue lines
xlabel('z (mm)');
ylabel('y (mm)');
zlabel('x (mm)');
title('3D Hallway Scan - Walkthrough View');
axis equal;
grid on;
view(20, 15); 